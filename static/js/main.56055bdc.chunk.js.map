{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","data","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","console","log","slice","useEffect","window","localStorage","setItem","JSON","stringify","DOING","DONE","ToDoList","useRecoilState","setCategory","savedToDos","getItem","parsedToDos","parse","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.56055bdc.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n}\n//Categories.\"TO_DO\"로 사용 각 주어진 번호도 있음\n//enum은 일련의 숫자를 문자로 표현\n\nexport interface IToDo {\n  //toDos object 따라서 setToDos할때 이 문법 따라야함\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TO_DO,\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    // if (category == \"TO_DO\")\n    //   return toDos.filter((toDo) => toDo.category === \"TO_DO\");\n    // if (category == \"DOING\")\n    //   return toDos.filter((toDo) => toDo.category === \"DOING\");\n    // if (category == \"DONE\")\n    return toDos.filter((toDo) => toDo.category === category);\n\n    // [\n    //   toDos.filter((toDo) => toDo.category === \"TO_DO\"),\n    //   toDos.filter((toDo) => toDo.category === \"DOING\"),\n    //   toDos.filter((toDo) => toDo.category === \"DONE\"),\n    // ]; //[ TO_DO array , DOING array, DONE array ] 출력\n  },\n});\n// atom value 중 하나를 get 해서 다르게 출력\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string; // input에서 submit한 value 이름\n  category: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n\n  const handleValid = (data: IForm) => {\n    setToDos((oldToDos) => [\n      { text: data.toDo, id: Date.now(), category }, //설정되어있는 category 에서 list 생성\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n    setValue(\"category\", \"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      {/* <input\n        {...register(\"category\", {\n          required: false,\n        })}\n        placeholder=\"create category\"\n      ></input>\n      <button>Add Category</button>\n      <br></br>\n      <br></br> */}\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React, { useEffect } from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n//interface만 가져와서 ToDo.text 안하고 그냥 key바로 써도 됨\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const toDos = useRecoilValue(toDoState);\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const name = event.currentTarget.name;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      // const oldToDo = oldToDos[targetIndex];\n      const newToDo = { text, id, category: name as any };\n      console.log(newToDo); //category가 바꼈기때문에\n\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n  useEffect(() => {\n    window.localStorage.setItem(\"toDos_key\", JSON.stringify(toDos));\n  }, [toDos]);\n\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          To Do\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          Done\n        </button>\n      )}\n    </li>\n  );\n}\n\nexport default ToDo;\n","import React, { useEffect } from \"react\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { Categories, categoryState, toDoSelector, toDoState } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector); //fiter한 ToDos\n  const setToDos = useSetRecoilState(toDoState);\n\n  // const toDos = useRecoilValue(toDoState); //배열인 아톰\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  const savedToDos = window.localStorage.getItem(\"toDos_key\");\n  const parsedToDos = JSON.parse(savedToDos as any);\n  console.log(parsedToDos);\n\n  useEffect(() => {\n    setToDos(() => parsedToDos);\n  }, []);\n\n  console.log(toDos);\n\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n      </select>\n\n      <CreateToDo />\n\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}